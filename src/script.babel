const url = "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json";
const colors = ["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"];
const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

document.addEventListener('DOMContentLoaded', () => {
	const myReq = new XMLHttpRequest();
    myReq.open("GET", url, true);
    myReq.send();
    myReq.onload = () => {
		const json = JSON.parse(myReq.responseText);
		const dataset = json.monthlyVariance
		
        const w = 1000,
			  h = 540,
			  padding = 100,
			  barWidth = w / (dataset.length / 12);
		
		dataset.forEach((val) => {
			val.month -= 1;
		});
		
		const section = d3.select(".chart")
        	.append("section");
    
		//heading
		const heading = section.append("heading");
		
		heading.append("h1")
			.attr('id', 'title')
			.text("Monthly Global Temperature");
		
		heading.append("h2")
      		.attr('id', 'description')
			.html(`<div>${json.monthlyVariance[0].year} - ${json.monthlyVariance[json.monthlyVariance.length-1].year}</div>
					<div>base temperature ${json.baseTemperature} &#8451</div>`);
		
		
		// scales //
		const xScale = d3.scaleBand()
      		.domain(dataset.map((d) => d.year ))
			.range([padding, w - padding]);
		
        const yScale = d3.scaleBand()
			.domain([0,1,2,3,4,5,6,7,8,9,10,11]) //months
            .range([h - padding, padding]);
		
		const minTemp = json.baseTemperature + d3.min(dataset, (d) => d.variance);
		const maxTemp = json.baseTemperature + d3.max(dataset, (d) => d.variance);
		
		const tempScale = d3.scaleThreshold()
			.domain(((min,max,count) => {
				const array = [];
				let step = (max-min)/count;
				let base = min;
				for(var i = 1; i < count; i++){
					array.push(base + i*step);
				}
				return array;
			})(minTemp, maxTemp, colors.length))
            .range(colors.reverse());
		
		
		// chart //
		const svg = d3.select(".chart")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

		// cells //
        svg.selectAll("rect")
			.data(dataset)
			.enter()
			.append("rect")
			.attr("class", "cell")
			.attr("data-month", d => d.month)
			.attr("data-year", d => d.year)
			.attr("data-temp", d => json.baseTemperature + d.variance)
			.attr("x", (d) => xScale(d.year) )
			.attr("y", (d) => yScale(d.month) )
			.attr("width", barWidth)
			.attr("height",(d) => (h - padding *2)/12)
			.attr("fill", d => tempScale(json.baseTemperature + d.variance))
		
		
            .on('mouseover', (d, i) => {
                tooltip.transition()
                .duration(200)
                .style('opacity', .9);
			
                tooltip.html(`
                    <div> 
                        <div><strong>Year</strong> ${d.year}</div>
                        <div><strong>Month</strong> ${months[d.month]}</div>
                        <div><strong>Variation</strong> ${d.variance}</div>
                    </div>`)
                .attr('data-year', d.year)
                .style('left', (i * w) + padding)
                .style('top', h - 1 + 'px');
            })
            .on('mouseout', (d) => {
                tooltip.transition()
                .duration(200)
                .style('opacity', 0);
            });
		
		
        const tooltip = d3.select(".chart")
			.append("div")
			.attr("id", "tooltip")
			.style("opacity", 0);
		
		
		// axis //
        const xAxis = d3.axisBottom(xScale)
			.tickValues(xScale.domain().filter((year) => {
			//set ticks to years divisible by 10
				return year%10 === 0;
			}));
		
        const yAxis = d3.axisLeft(yScale)
			.tickValues(yScale.domain())
			.tickFormat((month) => {
				return months[month];
			});
		
        svg.append("g")
            .attr("class", "x axis")
            .attr("id","x-axis")
       		.attr("transform", "translate(0," + (h - padding) + ")")
			.call(xAxis);

        svg.append("g")
            .attr("class", "y axis")
            .attr("id","y-axis")
            .attr("transform", "translate(" + padding + ",0)")
			.call(yAxis);
		
		//legend
		legendValues = tempScale.domain().map((c) => c);
				
		const x = d3.scaleLinear()
			.domain([2, 13])
			.range([0, 300]);

		const xAxisLegend = d3.axisBottom(x)
			.tickValues(legendValues);

		svg.append("g")
       		.attr("transform", "translate(0," + (h - 17) + ")")
			.call(xAxisLegend);
		
        svg.append("g")
			.attr("id", "legend")
       		.attr("transform", "translate(0," + (h - 37) + ")")
			.selectAll("rect")
			.data(legendValues)
			.enter()
			.append("rect")
			.attr("x", (d, i) => x(d))
			.attr("y", (d) => 0 )
			.attr("width", (d) => 300/12 )
			.attr("height",(d) => 20)
			.attr("fill", d => tempScale(d));
		
    }
});